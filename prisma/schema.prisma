// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  firstname    String
  middlename   String?
  lastname     String
  email        String        @unique
  password     String
  role         Role          @default(CANDIDATE)

  candidateType CandidateType?

  image        String?
  resume       String?
  skills       String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  jobs         Job[]         @relation("EmployerJobs")
  company      Company?

  companyId    String?       @db.ObjectId
  otp          String?
  // New fields for email verification
  emailVerified Boolean     @default(false)
  verifyToken   String?     @unique
  verifyExpires DateTime?
}

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  logo        String?
  website     String?
  employees   String?
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  jobs        Job[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Job {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  location     String
  type         JobType
  category     JobCategory
  salary       Int?
  deadline     DateTime
  experience   String?
  skills       String[]
  userId       String        @db.ObjectId
  user         User          @relation("EmployerJobs", fields: [userId], references: [id])
  companyId    String        @db.ObjectId
  company      Company       @relation(fields: [companyId], references: [id])
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Application {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  status      ApplicationStatus @default(PENDING)
  userId      String            @db.ObjectId
  user        User              @relation(fields: [userId], references: [id])
  jobId       String            @db.ObjectId
  job         Job               @relation(fields: [jobId], references: [id])
  coverLetter String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum Role {
  CANDIDATE
  EMPLOYER
  ADMIN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  REMOTE
}

enum JobCategory {
  SOFTWARE_DEVELOPMENT
  DESIGN
  MARKETING
  SALES
  FINANCE
  HR
  OTHER
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEW
  REJECTED
  ACCEPTED
}

enum CandidateType {
  REGULAR
  PWD
  LGBTQ
  WOMEN_RETURNING
  FEMALE
}