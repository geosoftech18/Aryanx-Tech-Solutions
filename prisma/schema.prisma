// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  firstname  String
  middlename String?
  lastname   String
  email      String  @unique
  password   String
  role       Role    

  candidate Candidate? @relation("UserToCandidate")

  company Company? @relation("UserToCompany")

  notifications Notification[]

  otp           String?
  // New fields for email verification
  emailVerified Boolean   @default(false)
  verifyToken   String?   
  verifyExpires DateTime?

  status UserStatus @default(PENDING)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Candidate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation("UserToCandidate", fields: [userId], references: [id])

  candidateType  CandidateType
  contact        String
  education      Education[]
  certifications Certification[]
  WorkExperience WorkExperience[]
  YOE            Int
  skills         String[]
  Bio            String
  Address        Address?         @relation(name: "AddressToCandidate")
  DOB            DateTime

  resume String?

  gender          Gender
  LGBTQ           LGBTQ? //for LGBTQ candidates
  employmentBreak String? //for women/employment break candidates
  pwdCategory     PwdCategory? //for PWD candidates
  applications    Application[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  logo        String?
  website     String?
  employees   String?
  industry    Industry
  sector      Sector
  userId      String   @unique @db.ObjectId
  user        User     @relation("UserToCompany", fields: [userId], references: [id] ,onDelete:Cascade)
  jobs        Job[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Job {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  location     String
  type         JobType
  category     JobCategory
  salary       Int?
  deadline     DateTime
  experience   String?
  skills       String[]
  isFeatured   Boolean       @default(false)
  isActive     Boolean       @default(true)
  companyId    String        @db.ObjectId
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications Application[]
  notifications Notification[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  jobFor       CandidateType @default(REGULAR)
}

model Application {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  status      ApplicationStatus @default(PENDING)
  userId      String            @db.ObjectId
  jobId       String            @db.ObjectId
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  coverLetter String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  Candidate   Candidate?        @relation(fields: [candidateId], references: [id])
  candidateId String?           @db.ObjectId
  notifications Notification[]
}

model Education {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  candidateId    String    @db.ObjectId
  candidate      Candidate @relation(fields: [candidateId], references: [id] ,onDelete: Cascade)
  degree         String
  specialisation String
  institution    String
  passout_year   DateTime
  CGPA           Int
}

model Certification {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  candidateId    String    @db.ObjectId
  candidate      Candidate @relation(fields: [candidateId], references: [id] ,onDelete: Cascade)
  name           String
  company        String
  issueDate      DateTime
  expirationDate DateTime
}

model WorkExperience {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  candidateId      String    @db.ObjectId
  candidate        Candidate @relation(fields: [candidateId], references: [id] ,onDelete: Cascade)
  position         String
  startDate        DateTime
  endDate          DateTime
  currentlyWorking Boolean
  jobDescription   String
  companyName      String
}

model Address {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  candidateId String?   @db.ObjectId
  candidate   Candidate @relation("AddressToCandidate", fields: [id], references: [id], onDelete: Cascade)
  houseNo     Int
  locality    String
  pincode     Int
  city        String
  state       String
  country     String
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  type        NotificationType
  title       String
  message     String
  isRead      Boolean         @default(false)
  createdAt   DateTime        @default(now())
  userId      String          @db.ObjectId
  user        User            @relation(fields: [userId], references: [id] ,onDelete: Cascade)
  jobId       String?         @db.ObjectId
  job         Job?            @relation(fields: [jobId], references: [id])
  applicationId String?       @db.ObjectId
  application Application?    @relation(fields: [applicationId], references: [id])
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum Role {
  CANDIDATE
  EMPLOYER
  ADMIN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  REMOTE
}

enum JobCategory {
  SOFTWARE_DEVELOPMENT
  DESIGN
  MARKETING
  SALES
  FINANCE
  HR
  OTHER
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEW
  REJECTED
  ACCEPTED
}

enum CandidateType {
  REGULAR
  PWD
  LGBTQ
  WOMEN_RETURNING
}

enum Gender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

enum LGBTQ {
  NON_BINARY
  TRANSGENDER
  GENDERFLUID
  AGENDER
  TWO_SPIRIT
  LESBIAN
  GAY
  BISEXUAL
  PANSEXUAL
  QUEER
  INTERSEX
  ASEXUAL
  PREFER_NOT_TO_SAY
  OTHER
}

enum PwdCategory {
  PHYSICAL
  VISUAL
  HEARING
  INTELLECTUAL
  MENTAL_HEALTH
  CHRONIC_ILLNESS
  NEUROLOGICAL
  LEARNING
  SPEECH
  DEVELOPMENTAL
  AUTOIMMUNE
  GENETIC
  MULTIPLE
  OTHER
}

enum Industry {
  TECHNOLOGY
  HEALTHCARE
  FINANCE
  EDUCATION
  MANUFACTURING
  RETAIL
  ECOMMERCE
  MEDIA
  TELECOMMUNICATIONS
  AUTOMOTIVE
  CONSULTING
  REAL_ESTATE
  HOSPITALITY
  AGRICULTURE
  OTHER
}

enum Sector {
  PUBLIC
  PRIVATE
  NON_PROFIT
  GOVERNMENT
  STARTUP
  MULTINATIONAL
}

enum NotificationType {
  NEW_JOB_POSTED
  APPLICATION_STATUS_UPDATED
  NEW_APPLICATION_RECEIVED
}
// all 3 redirects to admin dashboard
